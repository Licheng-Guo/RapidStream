import logging
import glob
import re
import os

all_module_names = set()
recorded_files = set()

# if file name contains a keyword, copy it to each slot
common_file_keywords = ['fifo', 'entry', 'axi', 'mul', 'add', 'div']

# make the source code of each slot distinct.
# avoid module sharing across slots
# Potentially different slots sharing the same module may cause problem to RapidWright
def duplicateSourceRTL(orig_rtl_path, target_dir, slot_name, FloorplanVertex):
  logging.info(f'Duplicate RTL for slot {slot_name} and add unique prefix')
  # initialization 
  if not all_module_names:
    logging.info('[duplicateSourceRTL] initializing...')
    # only consider the RTL by HLS
    all_rtl_files = glob.glob(f'{orig_rtl_path}/*.v')

    # extract all module names
    for file in all_rtl_files:
      content = open(file, 'r')
      for line in content:
        mod_def = re.findall(r'^[ ]*module[ ]+([^\( ]+)', line)       
        assert len(mod_def) <= 1
        if len(mod_def): 
          all_module_names.add(mod_def[0])

    # find all internal files
    for rtl in all_rtl_files:
      for vertices in FloorplanVertex.values():
        for v_type, v_name in vertices.items():
          content = open(rtl).read()
          if f'module {v_type}' in content:
            # need exact match
            if re.search(rf'module {v_type}[^A-Za-z_0-9]', content):
              recorded_files.add(rtl)

    logging.info('[duplicateSourceRTL] initialization finished')

  # duplicate the RTL code
  pblock_name = slot_name.replace('CR', 'CLOCKREGION').replace('_To_', ':')
  vertices = FloorplanVertex[pblock_name]

  all_rtl_files = glob.glob(f'{orig_rtl_path}/*.v')
  for rtl in all_rtl_files:
    for v_type, v_name in vertices.items():
      if any(key in rtl for key in common_file_keywords) \
        or f'module {v_type}' in open(rtl).read() :
        os.system(f'cp {rtl} {target_dir}/')

  # a hack to handle the internal files. Just copy them all
  for rtl in all_rtl_files:
    if rtl not in recorded_files:
      os.system(f'cp {rtl} {target_dir}/')

  # add a unique prefix to any occurrence of those names in the RTL by HLS
  # including ones in the IP tcl files
  # do not process the wrapper RTL file generated by us
  for file in glob.glob(f'{target_dir}/*'): # may include tcl files for IPs
    new_rtl = []
    with open(file, 'r') as inputfile:
      for line in inputfile:
        for mod_name in all_module_names:
          if mod_name in line: # filter to speed things up
            # exact match
            line = re.sub(fr'( |^)({mod_name})([^A-Za-z_0-9])', fr'\1{slot_name}_\2\3',line)
        new_rtl.append(line)

    with open(file, 'w') as outputfile:
      outputfile.write(''.join(new_rtl))
