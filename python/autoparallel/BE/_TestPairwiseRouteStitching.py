import sys
import json
import os
import re
from autoparallel.BE.SlotRouting import addAllAnchors, unrouteNonLagunaAnchorDPinQPinNets


def getVivadoScriptForSlotPair(pair_name):

  script = []

  # this will be generated by RW after the stitching
  script.append(f'source -notrace {test_dir}/{pair_name}/{pair_name}_load.tcl')

  # to verify the tap of row buffers
  script.append(f'puts [get_property ROUTE [get_nets ap_clk]]')
  script.append(f'report_timing_summary')

  # add back the placeholder FFs
  script += addAllAnchors(hub, base_dir, pair_name.split('_AND_'))

  # unroute non-laguna anchor nets
  script += unrouteNonLagunaAnchorDPinQPinNets()

  # unroute the laguna nets that cause conflict
  script.append(f'route_design -unroute -nets [get_nets -hierarchical -filter {{ ROUTE_STATUS == "CONFLICTS" }}]')

  # relax the clock 
  script.append(f'create_clock -name ap_clk -period 3 [get_pins test_bufg/O]')
  script.append(f'set_clock_uncertainty -hold 0 [get_clocks ap_clk]')

  script.append(f'write_checkpoint -force {pair_name}_before_routed.dcp')

  script.append(f'route_design -preserve')

  script.append(f'write_checkpoint -force {pair_name}_routed.dcp')

  return script


def getParallelTasks():
  all_tasks = []
  for pair in pair_list:
    pair_name = '_AND_'.join(pair)

    cd = f'cd {test_dir}/{pair_name}'
    rw_source = 'source ~/rapidwright/rapidwright_06_29/rapidwright.sh'
    get_dcp_regexp = lambda slot_name: f'(.*{slot_name}.*phys_opt.*dcp)'
    all_dcp_regexps = f'{get_dcp_regexp(pair[0])}|{get_dcp_regexp(pair[1])}'
    rw = f'java com.xilinx.rapidwright.examples.MergeDCP {slot_routing_dir} {pair_name}.dcp "{all_dcp_regexps}"'

    vivado = f'VIV_VER=2021.1 vivado -mode batch -source {pair_dir}/route_pair.tcl'

    stitch = f'{cd} && {rw_source} && {rw} && {vivado}  '

    all_tasks.append(stitch)

  open(f'{test_dir}/parallel-route-pairs.txt', 'w').write('\n'.join(all_tasks))

if __name__ == '__main__':
  assert len(sys.argv) >= 3, 'input (1) the path to the front end result file; (2) the target directory'
  hub_path = sys.argv[1]
  base_dir = sys.argv[2]
  test_dir = f'{base_dir}/test_pairwise_route_stitching'
  slot_routing_dir = f'{base_dir}/unique_slots_add_anchor_reroute'
  os.mkdir(test_dir)

  hub = json.loads(open(hub_path, 'r').read())
  pair_list = hub["AllSlotPairs"]

  for pair in pair_list:
    pair_name = '_AND_'.join(pair)
    pair_dir = f'{test_dir}/{pair_name}'
    os.mkdir(pair_dir)

    script = getVivadoScriptForSlotPair(pair_name)
    open(f'{pair_dir}/route_pair.tcl', 'w').write('\n'.join(script))

  getParallelTasks()
