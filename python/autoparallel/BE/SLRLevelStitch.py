import argparse
import sys
import json
import re
import os

import autoparallel.BE.Constants as Constants
from autoparallel.BE.SlotRouting import addSomeAnchors, removePlaceholderAnchors
from autoparallel.BE.Utilities import getSlotsInSLRIndex, loggingSetup

loggingSetup()

SLR_NUM = 4


def getVivadoRouteSLRScript(slr_index):
  """
  load the merged dcp by RW, route in preserve mode
  """
  script = []
  vivado_dir = f'{slr_stitch_dir}/vivado/slr_{slr_index}'

  # this will be generated by RW after the stitching
  script.append(f'source -notrace {vivado_dir}/slr_{slr_index}_load.tcl')
  
  script.append('report_route_status')
  
  # to verify the tap of row buffers
  script.append(f'set fp [open "clock_route.txt" "w" ]') # to check the row buffer tap
  script.append(f'puts $fp [get_property ROUTE [get_nets ap_clk]]')
  script.append(f'close $fp')
  script.append(f'report_timing_summary')

  script.append(f'delete_pblocks *')

  # relax the clock 
  script.append(f'create_clock -name ap_clk -period 3 [get_pins test_bufg/O]')
  script.append(f'set_clock_uncertainty -hold 0.02 [get_clocks ap_clk]')

  script.append(f'write_checkpoint {vivado_dir}/pre_route_checkpoint/slr_{slr_index}_before_routed.dcp')
  script.append(f'write_edif {vivado_dir}/pre_route_checkpoint/slr_{slr_index}_before_routed.edf')

  # add back the placeholder FFs
  script += addSomeAnchors(hub, base_dir, getSlotsInSLRIndex(hub, slr_index))

  script.append(f'route_design -preserve')

  # remove the placeholder anchors
  script += removePlaceholderAnchors()

  script.append(f'set_clock_uncertainty -hold 0 [get_clocks ap_clk]')

  script.append(f'write_checkpoint {vivado_dir}/routed_checkpoint/routed_slr_{slr_index}.dcp')
  script.append(f'write_edif {vivado_dir}/routed_checkpoint/routed_slr_{slr_index}.edf')

  return script


def getRWRouteSetupScript(slr_index):
  """
  convert the RW checkpoint into Vivado checkpoint
  Make it easier to send the test cases to Yun
  """
  script = []
  rwroute_dir = f'{slr_stitch_dir}/rwroute/slr_{slr_index}'

  script.append(f'source -notrace {rwroute_dir}/slr_{slr_index}_load.tcl')
  script.append(f'write_checkpoint {rwroute_dir}/pre_route_checkpoint/slr_{slr_index}_before_routed_with_conflict.dcp')
  script.append(f'write_edif {rwroute_dir}/pre_route_checkpoint/slr_{slr_index}_before_routed_with_conflict.edf')
  return script


def getVivadoRouteParallelTasks():
  """
  route each SLR by Vivado
  """
  all_tasks = []

  # stitch the anchor nets unrouted checkpoints for Vivado
  for slr_index in range(SLR_NUM):
    vivado_dir = f'{slr_stitch_dir}/vivado/slr_{slr_index}'
    slots = getSlotsInSLRIndex(hub, slr_index)

    cd = f'cd {vivado_dir}'
    get_dcp_regexp = lambda slot_name: f'(.*{slot_name}.*non_laguna_anchor_nets_unrouted.dcp)'
    all_dcp_regexps = '|'.join([get_dcp_regexp(slot_name) for slot_name in slots])
    rw_stitch = f'source {args.rw_stitch_setup_path} && java com.xilinx.rapidwright.examples.MergeDCP {slot_routing_dir} slr_{slr_index}.dcp "{all_dcp_regexps}"'

    vivado = f'VIV_VER={args.vivado_version} vivado -mode batch -source {vivado_dir}/route_slr.tcl'

    stitch = f'{cd} && {rw_stitch} && {vivado}'

    all_tasks.append(stitch)

  open(f'{slr_stitch_dir}/vivado/parallel-route-slr.txt', 'w').write('\n'.join(all_tasks))


def getRWRouteSetupParallelScript():
  """
  generate the Vivado checkpoint for each SLR
  Note that RWRoute use the checkpoint without unrouting anchor nets
  """
  all_tasks = []

  # stitch the non-unroute checkpoints for RWRoute
  for slr_index in range(SLR_NUM):
    rwroute_dir = f'{slr_stitch_dir}/rwroute/slr_{slr_index}'
    slots = getSlotsInSLRIndex(hub, slr_index)

    cd = f'cd {rwroute_dir}'
    get_dcp_regexp = lambda slot_name: f'(.*{slot_name}.*phys_opt_routed.*.dcp)'
    all_dcp_regexps = '|'.join([get_dcp_regexp(slot_name) for slot_name in slots])
    rw_stitch = f'source {args.rw_stitch_setup_path} && java com.xilinx.rapidwright.examples.MergeDCP {slot_routing_dir} slr_{slr_index}.dcp "{all_dcp_regexps}"'

    rw_route = f'source {args.rw_route_setup_path} && ' + Constants.RWROUTE.format(dcp=f'slr_{slr_index}.dcp', target_dir=f'{slr_stitch_dir}/rwroute/slr_{slr_index}/routed_checkpoint')

    get_rwroute_preroute_dcp = f'{cd} && {rw_stitch} && {rw_route}'

    all_tasks.append(get_rwroute_preroute_dcp)

  open(f'{slr_stitch_dir}/rwroute/parallel-route-slr.txt', 'w').write('\n'.join(all_tasks))


def setupTopStitch():
  os.mkdir(f'{slr_stitch_dir}/vivado/top_stitch')
  os.mkdir(f'{slr_stitch_dir}/rwroute/top_stitch')

  get_cmd = lambda tool: f'source {args.rw_stitch_setup_path} && java com.xilinx.rapidwright.examples.MergeDCP -Xmx100g {slr_stitch_dir}/{tool} top_stitch.dcp ".*routed_slr_\d.*dcp"'
  open(f'{slr_stitch_dir}/vivado/top_stitch/stitch.sh', 'w').write(get_cmd('vivado'))
  open(f'{slr_stitch_dir}/rwroute/top_stitch/stitch.sh', 'w').write(get_cmd('rwroute'))


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument("--hub_path", type=str, required=True)
  parser.add_argument("--base_dir", type=str, required=True)
  parser.add_argument("--vivado_version", type=str, required=True)
  parser.add_argument("--rw_stitch_setup_path", type=str, required=True)
  parser.add_argument("--rw_route_setup_path", type=str, required=True)
  args = parser.parse_args()

  hub_path = args.hub_path
  base_dir = args.base_dir

  hub = json.loads(open(hub_path, 'r').read())

  slr_stitch_dir = f'{base_dir}/SLR_level_stitch'
  os.mkdir(slr_stitch_dir)
  os.mkdir(f'{slr_stitch_dir}/vivado')
  os.mkdir(f'{slr_stitch_dir}/rwroute')

  slot_routing_dir = f'{base_dir}/slot_routing'

  anchor_placement_dir = f'{base_dir}/ILP_anchor_placement_iter0'
  anchor_source_placement_script = 'place_laguna_anchor_source_cells.tcl'

  for slr_index in range(SLR_NUM):
    vivado_dir = f'{slr_stitch_dir}/vivado/slr_{slr_index}'
    rwroute_dir = f'{slr_stitch_dir}/rwroute/slr_{slr_index}'

    os.mkdir(f'{vivado_dir}')
    os.mkdir(f'{vivado_dir}/routed_checkpoint')
    os.mkdir(f'{vivado_dir}/pre_route_checkpoint')
    os.mkdir(f'{rwroute_dir}')
    os.mkdir(f'{rwroute_dir}/routed_checkpoint')
    os.mkdir(f'{rwroute_dir}/pre_route_checkpoint')

    vivado_script = getVivadoRouteSLRScript(slr_index)
    open(f'{vivado_dir}/route_slr.tcl', 'w').write('\n'.join(vivado_script))

    rwroute_script = getRWRouteSetupScript(slr_index)
    open(f'{rwroute_dir}/get_preroute_dcp_with_conflict.tcl', 'w').write('\n'.join(rwroute_script))

  getVivadoRouteParallelTasks()
  getRWRouteSetupParallelScript()

  setupTopStitch()