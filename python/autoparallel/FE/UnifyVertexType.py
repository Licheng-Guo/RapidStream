#! /usr/bin/python3.6
import logging
import difflib
from os import walk
import re
import shutil

def unifyVertexType(orig_rtl_dir):
  # get all rtl generated by hls
  _, _, source_files = next(walk(orig_rtl_dir))
  assert(all(path.endswith('.v') or path.endswith('.tcl') for path in source_files))
  
  rtl_files = [f for f in source_files if f.endswith('.v')]
  module_names = [f[:-2] for f in rtl_files]
  
  # note that we sort the list of types
  module_names.sort()

  # record the new type
  old2new = {}

  prev = ''
  for module in module_names:
    full_diff_result = [li for li in difflib.ndiff(prev, module)]
    diff_operator_list = [li for li in full_diff_result if li[0] != ' ']
    diff_value_list = [li[2:] for li in diff_operator_list]
    diff_count = int(len(diff_value_list)/2)

    # check if the only difference is number
    cond1 = all(s.isdecimal() or s == '_' for s in diff_value_list)
    
    # avoid the case of 'kerner3_PE_0_0' vs 'kernel4_PE_0_0', which should be different
    # after a difference is encoutered, the remaining diff result should be 
    # (1) all differences or
    # (2) match of '_' or
    # (3) match of number
    cond2 = True
    for i in range(len(full_diff_result)):
      if '+' in full_diff_result[i] or '-' in full_diff_result[i]:
        remain = full_diff_result[i:]
        cond2 = all('+ ' in s or '- ' in s or s == '  _' or s[2:].isdecimal() for s in remain)
        break
    
    cond3 = 'fifo' not in module

    if cond1 and cond2 and cond3:
      old2new[module] = prev
    else:
      # old2new[module] = module
      prev = module

  return old2new

def applyUnificationToTopRTL(top_rtl_path, old2new):
  top = open(top_rtl_path, 'r')
  updated_top = open('new_top_unified_type.v', 'w')

  for line in top:
    match = re.search(r'^[ ]*([a-zA-Z0-9_]+)[ ]', line)
    if match:
      old_type = match.group(1)
      
      if old_type in old2new:
        logging.info(f'replace module type in line {line[:-1]} -> {old2new[old_type]}')
        line = line.replace(old_type, old2new[old_type])
    updated_top.write(line)

  shutil.move('new_top_unified_type.v', top_rtl_path)
  
def unifyModuleTypesInTopRTL(rtl_dir, top_rtl_path):
  old2new = unifyVertexType(rtl_dir)
  applyUnificationToTopRTL(top_rtl_path, old2new)
